@page "/"
@inject BooksClient BooksClient;
@inject AuthorsClient AuthorsClient;
@inject CategoriesClient CategoriesClient;
@attribute [StreamRendering]

<PageTitle>BookStore - Home</PageTitle>

<p class="fs-4 text-center txt-custom-dark mb-5">Your one stop book store.</p>

<div>
    @if(books is null || authors is null || categories is null)
    {
        <div class="text-center my-3 custom-vh">
            <p class="fs-5 txt-custom-dark fw-bold">Loading.....</p>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center custom-w-80 mx-auto mb-2">
            <div class="d-flex">
                <InputText id="search" @bind-Value="searchTerm" class="form-control" style="width: 350px"/>
                <button @onclick="SearchBooks" class="btn bg-custom-btn-dark txt-custom-dark ms-2 fs-5">
                    <i class="bi bi-search"></i>
                    <span class="ms-2">Search</span>
                </button>
            </div>
            <a href="/add" class="btn bg-custom-btn-dark txt-custom-dark py-2 fs-5 px-3">
                <i class="bi bi-plus-circle-fill"></i>
                <span class="ps-1">Add New Book</span>
            </a>
        </div>
        
        <div class="d-flex flex-wrap gap-4 mx-auto align-items-center justify-content-center py-3 my-2">
            @foreach (var book in books)
            {
                <div class="card card-w-40 shadow ">
                    <div class="card bg-dark-custom px-2 pt-3 my-0">
                        <h5 class="card-title text-white mb-3 fs-4 py-0 my-0">@book.Name</h5>
                        <p class="card-text text-white fs-6 py-0 my-0">
                            <span class="fw-bold">Author:</span> @setAuthor(@book.AuthorId)
                         </p>
                        <p class="card-text text-white fs-6 py-0 my-0">
                            <span class="fw-bold">Category:</span> @setCategory(@book.CategoryId)
                         </p>
                        <p class="card-text text-white fs-6 py-0 my-0">
                            <span class="fw-bold">Released:</span> @book.ReleaseDate
                        </p>
                        <p class="card-text text-white fs-6 py-3">@book.Description</p>

                        <div class="d-flex justify-content-between align-items-center py-3">
                            <p class="card-text text-white fs-6 py-0 my-0">
                                <span class="fw-bold">Price:</span> @book.Price
                            </p>
                            <div class="text-end">
                                <a href="@BookEditUrl(book.BookId)" class="btn bg-custom-btn-dark txt-custom-dark">
                                    <i class="bi bi-pencil-square"></i>
                                    Edit
                                 </a>
                                <a href="@BookDeleteUrl(book.BookId)" class="btn btn-danger">
                                    <i class="bi bi-trash"></i>
                                    Delete
                                </a>
                            </div>
                        </div>
                                              
                    </div>
                </div>
            }
        </div>        
    }  
</div>

@code {
    private string searchTerm = string.Empty;
    private Book[]? books;
    private Author[]? authors;
    private Category[]? categories;

    protected override async Task OnInitializedAsync()
    {
        books = await BooksClient.GetBooksAsync();
        authors = await AuthorsClient.GetAuthorsAsync();
        categories = await CategoriesClient.GetCategoriesAsync();
    }

    private static string BookEditUrl(int id) => $"/edit-book/{id}";
    private static string BookDeleteUrl(int id) => $"/delete-book/{id}";
    
    private string? setAuthor(int? id)
    {
        var author = authors?.FirstOrDefault(a => a.AuthorId == id);

        if (author is not null) return author.Name;
        return "default";
    }

    private string? setCategory(int? id)
    {
        var category = categories?.FirstOrDefault(a => a.CategoryId == id);

        if (category is not null) return category.Name;
        return "default";
    }

    private void SearchBooks()
    {
        Console.WriteLine("search books");
    }

}
